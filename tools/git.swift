1. git的作用:
  1. 版本控制 Git 能够跟踪代码的历史版本 记录每个版本的更改 可以让开发者方便地查看和恢复之前的版本 防止代码被意外覆盖或删除。
  2. 分支管理 Git 允许开发者创建多个分支 每个分支可以在独立的环境中进行开发和测试 然后将更改合并到主分支上。这个功能非常有用 因为它可以让多个开发者在同一时间开发同一个项目的不同功能 而不会互相影响。
  3. 团队协作 Git 能够支持多个开发者同时工作在同一个项目上 每个人可以在本地完成自己的工作 然后将更改推送到共享的代码库中。Git 提供了强大的协作功能 例如代码评审、冲突解决等 可以让团队更加高效地协作开发。
  4. 备份和恢复 Git 可以帮助开发者对项目进行备份 保证数据的安全性 并能够在出现问题时快速地恢复项目。
  5. 跨平台支持 Git 可以在 Windows、Linux、Mac 等操作系统上运行 因此可以适用于各种不同的开发环境和团队
2. git的使用:
  1. vscode集成git使用
    1. 安装git
    2. 打开项目文件夹
    3. 初始化Git仓库: git init
    4. 向git仓库添加所有文件: git addd .
    5. 提交更改: git commit -m "commit message"
    6. 查看更改: git status 显示哪些文件已修改但尚未添加到Git仓库中 以及哪些文件已添加到Git仓库但尚未提交
    7. 连接远程仓库: git remote add origin <remote repository URL>
    8. 推送更改: git push

  2. 强烈建议所有的git仓库都有一个README, LICENSE, .gitignore文件
    1. README 文件 README 文件通常是一个包含项目介绍、安装、配置、使用方法等信息的文本文件 可以帮助其他人快速了解你的项目。同时 README 文件也可以让你自己更好地组织和记录你的项目信息。
    2. LICENSE 文件 LICENSE 文件规定了你的代码或项目的使用和分发条款 可以避免版权纠纷和法律问题。如果你没有在代码中明确声明许可证条款 其他人可能会认为你的代码是专有的 从而违反了版权法
  3. git的基本操作
    3. git init 初始化 Git 仓库。
    4. git add 将文件添加到 Git 的暂存区 准备提交。
    5. git commit 提交文件到 Git 仓库 记录变更历史。
    6. git clone 克隆一个 Git 仓库到本地。
    7. git pull 从远程仓库拉取最新代码。
    8. git push 将本地的代码推送到远程仓库。
    9. git branch 管理 Git 分支。
    10. git merge 合并两个分支的代码。
    11. git diff 比较文件之间的差异。
    12. git status 查看当前 Git 仓库的状态。
    13. git log 查看 Git 仓库的提交历史。
    14. git stash 将当前的修改存储到 Git 的暂存区中 以便稍后恢复。
    15. git reset 重置 Git 仓库的状态。
    16. git tag 为 Git 仓库打标签。
    17. git remote 管理远程 Git 仓库
  4. .gitignore
    1. 作用: 
      1. .gitignore 文件 .gitignore 文件可以忽略你不想添加到 Git 仓库中的文件或目录
      2. 比如日志文件、缓存文件、临时文件等 这些文件可能会使 Git 仓库变得更大 降低代码的可读性和可维护性 同时也会给其他人带来不必要的麻烦
    2. 使用: 
      1. 打开您要创建或编辑.gitignore文件的目录。
      2. 使用您最喜欢的文本编辑器创建一个新文件 将其命名为“.gitignore” 请注意文件名前的点号 这是必需的 。
      3. 确定您要忽略的文件或目录 并将它们添加到文件中。以下是一些示例规则 
        1. 忽略特定文件: file.txt
        2. 忽略特定文件夹: folder/
        3. 忽略特定后缀名: *.log
        4. 忽略所有的 .txt 文件: *.txt
      4. 每条规则占用一行 并以斜杠 / 结尾以表示该规则是用于忽略目录而不是文件。
      在需要忽略的文件或目录前添加#注释 以便您和其他人可以更轻松地理解规则的含义。
      5. 在您的.gitignore文件中 您还可以使用一些特殊字符来表示不同的规则。例如 
        1. ! 表示不要忽略特定的文件或目录 而是跟踪它们。
        2. # 表示注释行。
        3. * 表示通配符 匹配任意字符。
        4. ** 表示递归匹配任意字符。
      6. 
  5. git tag
    1. 作用
      1. 标记版本 将一个特定的提交打上标签 标记出这个版本的重要性和版本号等信息。
      2. 管理发布 标记一个特定的提交作为发布版本 可以在发布时轻松地检索并使用它。
      3. 管理分支 标记一个分支的特定提交 以便您可以在需要时快速切换到该分支的特定版本
    2. 使用:
      1. 创建标签 使用以下命令来创建一个新的标签  git tag <tag-name>
      2. 将标签绑定到特定提交 使用以下命令将标签绑定到特定提交: git tag -a <tag-name> -m "<tag-message>" <commit-hash>
        1. 其中<tag-name>是标签的名称 <tag-message>是一个描述标签的可选注释 <commit-hash>是要打标签的提交哈希值。该命令将创建一个带有注释信息的附注标签
      3. 查看标签 使用以下命令来查看所有可用的标签: $ git tag
      4. 推送标签 默认情况下 使用git push命令不会将标签推送到远程仓库 要推送标签 您需要使用以下命令: $ git push origin <tag-name>
    3. 概念:
      1. 一种用于在Git仓库中标记特定提交的快照的方法 
      2. 通常用于标记发布版本或重要的里程碑。标签可以是轻量级标签或带有额外注释信息的附注标签
  6. vscode插件
    1. GitLens: 查看编写作者
3. 概念:
  1. 一款免费、开源的分布式版本控制系统，它可以帮助开发者管理和跟踪项目代码的历史记录、版本、分支和协作
  